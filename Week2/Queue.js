// Implementation


// class Queue{
//     constructor(){
//         this.items = []
//     }

//     enqueue(x){
//         this.items.push(x)
//     }

//     dequeue(){
//         return this.items.shift()
//     }

//     front(){
//         return this.items[0]
//     }

//     isEmpty(){
//         return this.items.length === 0
//     }
// }






// Queue in Object



// class Queue {
//     constructor(){
//         this.items = {}
//         this.rear = 0
//         this.front = 0
//     }

//     enqueue(x){
//         this.items[this.rear] = x
//         this.rear++
//     }

//     dequeue(){
//         const item = this.items[this.front]
//         delete this.items[this.front]
//         this.front++
//         return item
//     }

//     isEmpty(){
//         return this.rear - this.front === 0
//     }

//     peek(){
//         return this.items[this.front]
//     }

//     size(){
//         return this.rear - this.front
//     }

//     print(){
//         console.log(this.items)
//     }
// }


// const q = new Queue()

// console.log(q.isEmpty());

// q.enqueue(10)
// q.enqueue(20)
// q.enqueue(30)
// console.log(q.size());
// q.print()

// console.log(q.dequeue());

// console.log(q.peek());







// Circular Queue - Implementation



// class CircularQueue{
//     constructor(capacity){
//         this.items = new Array(capacity)
//         this.capacity = capacity
//         this.currentLength = 0
//         this.rear = -1
//         this.front = -1
//     }

//     isFull(){
//         return this.currentLength === this.capacity
//     }

//     isEmpty(){
//         return this.currentLength === 0
//     }

    
// }





















// Check if a Queue is a Palindrome


// function palindrome(queue){
//     let str = ""
//     let reversed = ""

//     for(let i=0 ; i< queue.length ; i++){
//         str += queue[i]
//         reversed = queue[i] + reversed
//     }
//     return str === reversed
// }

// console.log(palindrome(['r', 'a', 'c', 'e', 'c', 'a', 'r']));
// console.log(palindrome(['h', 'e', 'l', 'l', 'o']));







//..........................................................................................................................................................................................................
//..........................................................................................................................................................................................................
//..........................................................................................................................................................................................................
//..........................................................................................................................................................................................................
//..........................................................................................................................................................................................................
//..........................................................................................................................................................................................................
//..........................................................................................................................................................................................................
//..........................................................................................................................................................................................................
//..........................................................................................................................................................................................................
//..........................................................................................................................................................................................................
//..........................................................................................................................................................................................................


// Check if a queue is palindrome or not



// function pali(queue){
//     let str = ""
//     let reverse = ""
    
//     for(let i =0;i<queue.length;i++){
//         str += queue[i]
//         reverse = queue[i] + reverse
//     }
//     return str === reverse
// }

// let queue = ['r', 'a', 'c', 'e', 'c', 'a', 'r']

// console.log(pali(queue))







